// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo base de Usuario
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  role      Role     @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones específicas
  patient    Patient?
  doctor     Doctor?
  appointments Appointment[]

  @@map("users")
}

model UserConsent {
    userId       String @id
    consentGiven Boolean
}

// Modelo para Pacientes
model Patient {
  id             String   @id @default(cuid())
  userId         String   @unique
  dateOfBirth    DateTime
  phone          String?
  address        String?
  medicalHistory String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments PatientAppointment[]

  @@map("patients")
}

// Modelo para Doctores
model Doctor {
  id            String   @id @default(cuid())
  userId        String   @unique
  specialty     String
  licenseNumber String   @unique
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments DoctorAppointment[]

  @@map("doctors")
}

// Modelo para Citas
model Appointment {
  id        String            @id @default(cuid())
  patientId String
  doctorId  String
  dateTime  DateTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relaciones
  patient PatientAppointment[]
  doctor  DoctorAppointment[]
  user    User @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

// Tablas de relación para Many-to-Many
model PatientAppointment {
  patientId     String
  appointmentId String

  patient     Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@id([patientId, appointmentId])
  @@map("patient_appointments")
}

model DoctorAppointment {
  doctorId      String
  appointmentId String

  doctor      Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@id([doctorId, appointmentId])
  @@map("doctor_appointments")
}

// Enums
enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}
